#!/usr/bin/env python3
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auto Smart Trader
‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
"""
import os
import sys
import subprocess
import time
from datetime import datetime

def check_process_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Auto Smart Trader ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ process ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô auto_smart_trader_thai.py
        result = subprocess.run(
            ["ps", "aux"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        
        processes = []
        for line in result.stdout.split('\n'):
            if 'auto_smart_trader_thai.py' in line and 'grep' not in line:
                processes.append(line.strip())
        
        return processes
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö process ‡πÑ‡∏î‡πâ: {e}")
        return []

def check_recent_activity():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå log (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    log_files = [
        "trader.log",
        "auto_trader.log", 
        "smart_trader.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()
                    if lines:
                        last_line = lines[-1].strip()
                        return f"üìã Log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {last_line}"
            except Exception as e:
                continue
    
    return "üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå log"

def get_position_info():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ check_balance.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        result = subprocess.run(
            [sys.executable, "check_balance.py"], 
            capture_output=True, 
            text=True, 
            timeout=30,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.returncode == 0:
            output = result.stdout
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position ‡∏à‡∏≤‡∏Å output
            lines = output.split('\n')
            position_info = []
            
            in_positions = False
            for line in lines:
                if "CURRENT POSITIONS:" in line:
                    in_positions = True
                    continue
                elif "RECENT ORDERS:" in line:
                    in_positions = False
                    break
                elif in_positions and line.strip() and not line.startswith("---"):
                    position_info.append(line.strip())
            
            if position_info:
                return "üìä " + "\nüìä ".join(position_info)
            else:
                return "üìä ‡πÑ‡∏°‡πà‡∏°‡∏µ Position ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
        else:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position ‡πÑ‡∏î‡πâ: {result.stderr}"
            
    except Exception as e:
        return f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auto Smart Trader")
    print("=" * 60)
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö process
    processes = check_process_status()
    
    if processes:
        print("‚úÖ Auto Smart Trader ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:")
        for i, process in enumerate(processes, 1):
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• process
            parts = process.split()
            if len(parts) >= 11:
                pid = parts[1]
                cpu = parts[2]
                mem = parts[3]
                time_used = parts[9]
                command = " ".join(parts[10:])
                
                print(f"   {i}. PID: {pid}")
                print(f"      CPU: {cpu}%, Memory: {mem}%")
                print(f"      ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {time_used}")
                print(f"      ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}")
                print()
        
        print("üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        
    else:
        print("‚ùå Auto Smart Trader ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ: python3 auto_smart_trader_thai.py --interval 3")
        print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position
    print("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
    print("-" * 40)
    position_info = get_position_info()
    print(position_info)
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    activity = check_recent_activity()
    print(activity)
    print()
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if processes:
        print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   - ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Terminal ‡πÑ‡∏î‡πâ")
        print("   - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á")
        print("   - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á:")
        print("     python3 check_trader_status.py")
        print("   - ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏à‡∏≤‡∏Å Telegram notifications")
        print()
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö: kill " + " ".join([p.split()[1] for p in processes]))
    else:
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö: python3 auto_smart_trader_thai.py --interval 3")

if __name__ == "__main__":
    main()
